<?php
/**
 * UserAuthentication
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Forsta Atlas API
 *
 * User and Tag management API for Forsta Messaging Platform
 *
 * OpenAPI spec version: v1
 * Contact: support@forsta.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserAuthentication Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserAuthentication implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserAuthentication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authtoken' => 'string',
        'userauthtoken' => 'string',
        'jwtproxy' => 'string',
        'fq_tag' => 'string',
        'password' => 'string',
        'otp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authtoken' => null,
        'userauthtoken' => null,
        'jwtproxy' => null,
        'fq_tag' => null,
        'password' => null,
        'otp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authtoken' => 'authtoken',
        'userauthtoken' => 'userauthtoken',
        'jwtproxy' => 'jwtproxy',
        'fq_tag' => 'fq_tag',
        'password' => 'password',
        'otp' => 'otp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authtoken' => 'setAuthtoken',
        'userauthtoken' => 'setUserauthtoken',
        'jwtproxy' => 'setJwtproxy',
        'fq_tag' => 'setFqTag',
        'password' => 'setPassword',
        'otp' => 'setOtp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authtoken' => 'getAuthtoken',
        'userauthtoken' => 'getUserauthtoken',
        'jwtproxy' => 'getJwtproxy',
        'fq_tag' => 'getFqTag',
        'password' => 'getPassword',
        'otp' => 'getOtp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authtoken'] = isset($data['authtoken']) ? $data['authtoken'] : null;
        $this->container['userauthtoken'] = isset($data['userauthtoken']) ? $data['userauthtoken'] : null;
        $this->container['jwtproxy'] = isset($data['jwtproxy']) ? $data['jwtproxy'] : null;
        $this->container['fq_tag'] = isset($data['fq_tag']) ? $data['fq_tag'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['otp'] = isset($data['otp']) ? $data['otp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['authtoken']) && (mb_strlen($this->container['authtoken']) > 200)) {
            $invalidProperties[] = "invalid value for 'authtoken', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['authtoken']) && (mb_strlen($this->container['authtoken']) < 1)) {
            $invalidProperties[] = "invalid value for 'authtoken', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['userauthtoken']) && (mb_strlen($this->container['userauthtoken']) > 200)) {
            $invalidProperties[] = "invalid value for 'userauthtoken', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['userauthtoken']) && (mb_strlen($this->container['userauthtoken']) < 1)) {
            $invalidProperties[] = "invalid value for 'userauthtoken', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['jwtproxy']) && (mb_strlen($this->container['jwtproxy']) < 1)) {
            $invalidProperties[] = "invalid value for 'jwtproxy', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fq_tag']) && (mb_strlen($this->container['fq_tag']) > 200)) {
            $invalidProperties[] = "invalid value for 'fq_tag', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['fq_tag']) && (mb_strlen($this->container['fq_tag']) < 1)) {
            $invalidProperties[] = "invalid value for 'fq_tag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 200)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['otp']) && (mb_strlen($this->container['otp']) > 10)) {
            $invalidProperties[] = "invalid value for 'otp', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['otp']) && (mb_strlen($this->container['otp']) < 1)) {
            $invalidProperties[] = "invalid value for 'otp', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authtoken
     *
     * @return string
     */
    public function getAuthtoken()
    {
        return $this->container['authtoken'];
    }

    /**
     * Sets authtoken
     *
     * @param string $authtoken For code-based auth. Format: orgslug:userslug:sentcode
     *
     * @return $this
     */
    public function setAuthtoken($authtoken)
    {
        if (!is_null($authtoken) && (mb_strlen($authtoken) > 200)) {
            throw new \InvalidArgumentException('invalid length for $authtoken when calling UserAuthentication., must be smaller than or equal to 200.');
        }
        if (!is_null($authtoken) && (mb_strlen($authtoken) < 1)) {
            throw new \InvalidArgumentException('invalid length for $authtoken when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['authtoken'] = $authtoken;

        return $this;
    }

    /**
     * Gets userauthtoken
     *
     * @return string
     */
    public function getUserauthtoken()
    {
        return $this->container['userauthtoken'];
    }

    /**
     * Sets userauthtoken
     *
     * @param string $userauthtoken For token-based auth.
     *
     * @return $this
     */
    public function setUserauthtoken($userauthtoken)
    {
        if (!is_null($userauthtoken) && (mb_strlen($userauthtoken) > 200)) {
            throw new \InvalidArgumentException('invalid length for $userauthtoken when calling UserAuthentication., must be smaller than or equal to 200.');
        }
        if (!is_null($userauthtoken) && (mb_strlen($userauthtoken) < 1)) {
            throw new \InvalidArgumentException('invalid length for $userauthtoken when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['userauthtoken'] = $userauthtoken;

        return $this;
    }

    /**
     * Gets jwtproxy
     *
     * @return string
     */
    public function getJwtproxy()
    {
        return $this->container['jwtproxy'];
    }

    /**
     * Sets jwtproxy
     *
     * @param string $jwtproxy JWT token from trusted foreign source
     *
     * @return $this
     */
    public function setJwtproxy($jwtproxy)
    {

        if (!is_null($jwtproxy) && (mb_strlen($jwtproxy) < 1)) {
            throw new \InvalidArgumentException('invalid length for $jwtproxy when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['jwtproxy'] = $jwtproxy;

        return $this;
    }

    /**
     * Gets fq_tag
     *
     * @return string
     */
    public function getFqTag()
    {
        return $this->container['fq_tag'];
    }

    /**
     * Sets fq_tag
     *
     * @param string $fq_tag For password-based auth. Format: @userslug:orgslug
     *
     * @return $this
     */
    public function setFqTag($fq_tag)
    {
        if (!is_null($fq_tag) && (mb_strlen($fq_tag) > 200)) {
            throw new \InvalidArgumentException('invalid length for $fq_tag when calling UserAuthentication., must be smaller than or equal to 200.');
        }
        if (!is_null($fq_tag) && (mb_strlen($fq_tag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fq_tag when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['fq_tag'] = $fq_tag;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password For password-based auth.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 200)) {
            throw new \InvalidArgumentException('invalid length for $password when calling UserAuthentication., must be smaller than or equal to 200.');
        }
        if (!is_null($password) && (mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets otp
     *
     * @return string
     */
    public function getOtp()
    {
        return $this->container['otp'];
    }

    /**
     * Sets otp
     *
     * @param string $otp For multifactor auth.
     *
     * @return $this
     */
    public function setOtp($otp)
    {
        if (!is_null($otp) && (mb_strlen($otp) > 10)) {
            throw new \InvalidArgumentException('invalid length for $otp when calling UserAuthentication., must be smaller than or equal to 10.');
        }
        if (!is_null($otp) && (mb_strlen($otp) < 1)) {
            throw new \InvalidArgumentException('invalid length for $otp when calling UserAuthentication., must be bigger than or equal to 1.');
        }

        $this->container['otp'] = $otp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


