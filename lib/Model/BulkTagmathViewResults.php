<?php
/**
 * BulkTagmathViewResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Forsta Atlas API
 *
 * User and Tag management API for Forsta Messaging Platform
 *
 * OpenAPI spec version: v1
 * Contact: support@forsta.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BulkTagmathViewResults Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkTagmathViewResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BulkTagmathViewResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'userids' => 'string[]',
        'monitorids' => 'string[]',
        'universal' => 'string',
        'pretty' => 'string',
        'warnings' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'userids' => null,
        'monitorids' => null,
        'universal' => null,
        'pretty' => null,
        'warnings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userids' => 'userids',
        'monitorids' => 'monitorids',
        'universal' => 'universal',
        'pretty' => 'pretty',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userids' => 'setUserids',
        'monitorids' => 'setMonitorids',
        'universal' => 'setUniversal',
        'pretty' => 'setPretty',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userids' => 'getUserids',
        'monitorids' => 'getMonitorids',
        'universal' => 'getUniversal',
        'pretty' => 'getPretty',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userids'] = isset($data['userids']) ? $data['userids'] : null;
        $this->container['monitorids'] = isset($data['monitorids']) ? $data['monitorids'] : null;
        $this->container['universal'] = isset($data['universal']) ? $data['universal'] : null;
        $this->container['pretty'] = isset($data['pretty']) ? $data['pretty'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['userids'] === null) {
            $invalidProperties[] = "'userids' can't be null";
        }
        if ($this->container['monitorids'] === null) {
            $invalidProperties[] = "'monitorids' can't be null";
        }
        if ($this->container['universal'] === null) {
            $invalidProperties[] = "'universal' can't be null";
        }
        if ((mb_strlen($this->container['universal']) < 1)) {
            $invalidProperties[] = "invalid value for 'universal', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pretty'] === null) {
            $invalidProperties[] = "'pretty' can't be null";
        }
        if ((mb_strlen($this->container['pretty']) < 1)) {
            $invalidProperties[] = "invalid value for 'pretty', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['warnings'] === null) {
            $invalidProperties[] = "'warnings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userids
     *
     * @return string[]
     */
    public function getUserids()
    {
        return $this->container['userids'];
    }

    /**
     * Sets userids
     *
     * @param string[] $userids userids
     *
     * @return $this
     */
    public function setUserids($userids)
    {
        $this->container['userids'] = $userids;

        return $this;
    }

    /**
     * Gets monitorids
     *
     * @return string[]
     */
    public function getMonitorids()
    {
        return $this->container['monitorids'];
    }

    /**
     * Sets monitorids
     *
     * @param string[] $monitorids monitorids
     *
     * @return $this
     */
    public function setMonitorids($monitorids)
    {
        $this->container['monitorids'] = $monitorids;

        return $this;
    }

    /**
     * Gets universal
     *
     * @return string
     */
    public function getUniversal()
    {
        return $this->container['universal'];
    }

    /**
     * Sets universal
     *
     * @param string $universal universal
     *
     * @return $this
     */
    public function setUniversal($universal)
    {

        if ((mb_strlen($universal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $universal when calling BulkTagmathViewResults., must be bigger than or equal to 1.');
        }

        $this->container['universal'] = $universal;

        return $this;
    }

    /**
     * Gets pretty
     *
     * @return string
     */
    public function getPretty()
    {
        return $this->container['pretty'];
    }

    /**
     * Sets pretty
     *
     * @param string $pretty pretty
     *
     * @return $this
     */
    public function setPretty($pretty)
    {

        if ((mb_strlen($pretty) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pretty when calling BulkTagmathViewResults., must be bigger than or equal to 1.');
        }

        $this->container['pretty'] = $pretty;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[] $warnings warnings
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


