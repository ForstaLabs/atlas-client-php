<?php
/**
 * JoinForstaViewPostRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Forsta Atlas API
 *
 * User and Tag management API for Forsta Messaging Platform
 *
 * OpenAPI spec version: v1
 * Contact: support@forsta.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JoinForstaViewPostRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JoinForstaViewPostRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JoinForstaViewPostRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'captcha' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'fullname' => 'string',
        'tag_slug' => 'string',
        'password' => 'string',
        'org_name' => 'string',
        'org_slug' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'captcha' => null,
        'phone' => null,
        'email' => null,
        'fullname' => null,
        'tag_slug' => null,
        'password' => null,
        'org_name' => null,
        'org_slug' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'captcha' => 'captcha',
        'phone' => 'phone',
        'email' => 'email',
        'fullname' => 'fullname',
        'tag_slug' => 'tag_slug',
        'password' => 'password',
        'org_name' => 'org_name',
        'org_slug' => 'org_slug'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'captcha' => 'setCaptcha',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'fullname' => 'setFullname',
        'tag_slug' => 'setTagSlug',
        'password' => 'setPassword',
        'org_name' => 'setOrgName',
        'org_slug' => 'setOrgSlug'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'captcha' => 'getCaptcha',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'fullname' => 'getFullname',
        'tag_slug' => 'getTagSlug',
        'password' => 'getPassword',
        'org_name' => 'getOrgName',
        'org_slug' => 'getOrgSlug'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['captcha'] = isset($data['captcha']) ? $data['captcha'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fullname'] = isset($data['fullname']) ? $data['fullname'] : null;
        $this->container['tag_slug'] = isset($data['tag_slug']) ? $data['tag_slug'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['org_name'] = isset($data['org_name']) ? $data['org_name'] : null;
        $this->container['org_slug'] = isset($data['org_slug']) ? $data['org_slug'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['captcha'] === null) {
            $invalidProperties[] = "'captcha' can't be null";
        }
        if ((mb_strlen($this->container['captcha']) < 1)) {
            $invalidProperties[] = "invalid value for 'captcha', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fullname'] === null) {
            $invalidProperties[] = "'fullname' can't be null";
        }
        if ((mb_strlen($this->container['fullname']) < 1)) {
            $invalidProperties[] = "invalid value for 'fullname', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tag_slug'] === null) {
            $invalidProperties[] = "'tag_slug' can't be null";
        }
        if ((mb_strlen($this->container['tag_slug']) < 1)) {
            $invalidProperties[] = "invalid value for 'tag_slug', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['org_name']) && (mb_strlen($this->container['org_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'org_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['org_slug']) && (mb_strlen($this->container['org_slug']) < 1)) {
            $invalidProperties[] = "invalid value for 'org_slug', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets captcha
     *
     * @return string
     */
    public function getCaptcha()
    {
        return $this->container['captcha'];
    }

    /**
     * Sets captcha
     *
     * @param string $captcha captcha
     *
     * @return $this
     */
    public function setCaptcha($captcha)
    {

        if ((mb_strlen($captcha) < 1)) {
            throw new \InvalidArgumentException('invalid length for $captcha when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['captcha'] = $captcha;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {

        if ((mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string $fullname fullname
     *
     * @return $this
     */
    public function setFullname($fullname)
    {

        if ((mb_strlen($fullname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fullname when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets tag_slug
     *
     * @return string
     */
    public function getTagSlug()
    {
        return $this->container['tag_slug'];
    }

    /**
     * Sets tag_slug
     *
     * @param string $tag_slug tag_slug
     *
     * @return $this
     */
    public function setTagSlug($tag_slug)
    {

        if ((mb_strlen($tag_slug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tag_slug when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['tag_slug'] = $tag_slug;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {

        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets org_name
     *
     * @return string
     */
    public function getOrgName()
    {
        return $this->container['org_name'];
    }

    /**
     * Sets org_name
     *
     * @param string $org_name org_name
     *
     * @return $this
     */
    public function setOrgName($org_name)
    {

        if (!is_null($org_name) && (mb_strlen($org_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $org_name when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['org_name'] = $org_name;

        return $this;
    }

    /**
     * Gets org_slug
     *
     * @return string
     */
    public function getOrgSlug()
    {
        return $this->container['org_slug'];
    }

    /**
     * Sets org_slug
     *
     * @param string $org_slug org_slug
     *
     * @return $this
     */
    public function setOrgSlug($org_slug)
    {

        if (!is_null($org_slug) && (mb_strlen($org_slug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $org_slug when calling JoinForstaViewPostRequest., must be bigger than or equal to 1.');
        }

        $this->container['org_slug'] = $org_slug;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


