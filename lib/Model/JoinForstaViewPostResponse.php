<?php
/**
 * JoinForstaViewPostResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Forsta Atlas API
 *
 * User and Tag management API for Forsta Messaging Platform
 *
 * OpenAPI spec version: v1
 * Contact: support@forsta.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JoinForstaViewPostResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JoinForstaViewPostResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JoinForstaViewPostResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nametag' => 'string',
        'orgslug' => 'string',
        'jwt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nametag' => null,
        'orgslug' => null,
        'jwt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nametag' => 'nametag',
        'orgslug' => 'orgslug',
        'jwt' => 'jwt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nametag' => 'setNametag',
        'orgslug' => 'setOrgslug',
        'jwt' => 'setJwt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nametag' => 'getNametag',
        'orgslug' => 'getOrgslug',
        'jwt' => 'getJwt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nametag'] = isset($data['nametag']) ? $data['nametag'] : null;
        $this->container['orgslug'] = isset($data['orgslug']) ? $data['orgslug'] : null;
        $this->container['jwt'] = isset($data['jwt']) ? $data['jwt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nametag'] === null) {
            $invalidProperties[] = "'nametag' can't be null";
        }
        if ((mb_strlen($this->container['nametag']) < 1)) {
            $invalidProperties[] = "invalid value for 'nametag', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['orgslug'] === null) {
            $invalidProperties[] = "'orgslug' can't be null";
        }
        if ((mb_strlen($this->container['orgslug']) < 1)) {
            $invalidProperties[] = "invalid value for 'orgslug', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['jwt'] === null) {
            $invalidProperties[] = "'jwt' can't be null";
        }
        if ((mb_strlen($this->container['jwt']) < 1)) {
            $invalidProperties[] = "invalid value for 'jwt', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nametag
     *
     * @return string
     */
    public function getNametag()
    {
        return $this->container['nametag'];
    }

    /**
     * Sets nametag
     *
     * @param string $nametag nametag
     *
     * @return $this
     */
    public function setNametag($nametag)
    {

        if ((mb_strlen($nametag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nametag when calling JoinForstaViewPostResponse., must be bigger than or equal to 1.');
        }

        $this->container['nametag'] = $nametag;

        return $this;
    }

    /**
     * Gets orgslug
     *
     * @return string
     */
    public function getOrgslug()
    {
        return $this->container['orgslug'];
    }

    /**
     * Sets orgslug
     *
     * @param string $orgslug orgslug
     *
     * @return $this
     */
    public function setOrgslug($orgslug)
    {

        if ((mb_strlen($orgslug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $orgslug when calling JoinForstaViewPostResponse., must be bigger than or equal to 1.');
        }

        $this->container['orgslug'] = $orgslug;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return string
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param string $jwt jwt
     *
     * @return $this
     */
    public function setJwt($jwt)
    {

        if ((mb_strlen($jwt) < 1)) {
            throw new \InvalidArgumentException('invalid length for $jwt when calling JoinForstaViewPostResponse., must be bigger than or equal to 1.');
        }

        $this->container['jwt'] = $jwt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


